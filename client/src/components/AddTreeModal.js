import React, { useEffect, useState } from "react";
import {
  Modal,
  Button,
  Steps,
  Form,
  Input,
  InputNumber,
  DatePicker,
  Upload,
  Select,
  message,
} from "antd";
import { UploadOutlined } from "@ant-design/icons";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchConditions,
  fetchEnvironments,
  fetchSpecialNotes,
  fetchStatuses,
  createTree,
} from "../store/trees/treeThunks";
import dayjs from "dayjs";

const { TextArea } = Input;
const { Step } = Steps;

const AddTreeModal = ({ isOpen, onClose, initialCoords }) => {
  const [form] = Form.useForm();

  const [address, setAddress] = useState("");
  const [isLoadingAddress, setIsLoadingAddress] = useState(false);

  const dispatch = useDispatch();
  const { conditions, environments, specialNotes, statuses } = useSelector(
    (state) => state.trees
  );

  const [currentStep, setCurrentStep] = useState(0);

  const initialValues = {
    // adress: initialAddress || "",
    latitude: initialCoords?.lat || 0,
    longitude: initialCoords?.lng || 0,
  };
  useEffect(() => {
    const getAddressFromCoords = async (longitude, latitude) => {
      try {
        setIsLoadingAddress(true);
        const response = await fetch(
          `https://catalog.api.2gis.com/3.0/items/geocode?point=${longitude},${latitude}&key=592dca93-79b5-47c8-b149-e8bf215b0fd2`
        );
        const data = await response.json();
        if (data?.result?.items?.length > 0) {
          console.log("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", data);

          return data.result.items[0].full_name;
        }

        return "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:", error);
        return "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞";
      } finally {
        setIsLoadingAddress(false);
      }
    };

    if (initialCoords) {
      const fetchAddress = async () => {
        const addr = await getAddressFromCoords(
          initialCoords.lng,
          initialCoords.lat
        );
        setAddress(addr);
        form.setFieldsValue({ adress: addr }); // üõ†Ô∏è –í–û–¢ –≠–¢–û –î–û–ë–ê–í–¨
      };
      fetchAddress();
    }
  }, [initialCoords, form]);

  useEffect(() => {
    if (address) {
      form.setFieldsValue({ adress: address });
    }
  }, [address, form]);

  useEffect(() => {
    dispatch(fetchConditions());
    dispatch(fetchEnvironments());
    dispatch(fetchSpecialNotes());
    dispatch(fetchStatuses());
  }, [dispatch]);

  const normFile = (e) => (Array.isArray(e) ? e : e?.fileList);

  const beforeUpploadPhoto = (photo) => {
    const isJpgOrPng =
      photo.type === "image/jpeg" || photo.type === "image/png";
    const isFileUnder5MB = photo.size / 1024 / 1024 < 5;
    if (!isJpgOrPng) message.error("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JPG/PNG —Ñ–∞–π–ª—ã");
    if (!isFileUnder5MB) message.error("–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 5MB");
    return isJpgOrPng && isFileUnder5MB ? false : Upload.LIST_IGNORE;
  };

  const beforeUpploadDocument = (file) => {
    const allowedTypes = [
      "text/plain",
      "application/pdf",
      "application/msword",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    ];
    const isAllowed = allowedTypes.includes(file.type);
    const isFileUnder2MB = file.size / 1024 / 1024 < 2;
    if (!isAllowed)
      message.error("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ TXT, PDF, DOC –∏–ª–∏ DOCX —Ñ–∞–π–ª—ã");
    if (!isFileUnder2MB) message.error("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 2MB");
    return isAllowed && isFileUnder2MB ? false : Upload.LIST_IGNORE;
  };

  const handleNext = async () => {
    try {
      await form.validateFields(stepFields[currentStep]);
      setCurrentStep((prev) => prev + 1);
    } catch (err) {
      console.log("Validation Failed:", err);
    }
  };

  const handlePrev = () => {
    setCurrentStep((prev) => prev - 1);
  };

  const handleFinish = async () => {
    try {
      // const values = await form.validateFields();
      const values = form.getFieldsValue(true);

      console.log("üü¢ VALID VALUES:", values);

      // const formData = new FormData();

      // formData.append("type", values?.type?.name || "");
      // formData.append("adress", values.adress || "");
      // formData.append("latitude", values.latitude || 0);
      // formData.append("longitude", values.longitude || 0);
      // formData.append("statusId", values.statusId || "");
      // formData.append("envId", values.envId || "");
      // formData.append("specialNoteId", values.specialNoteId || "");
      // formData.append("conditionId", values.conditionId || "");
      // formData.append("owner", values.owner || "");
      // formData.append("year", values.year_of_planting?.year() || "");
      // formData.append("height", values.height || 0);
      // formData.append("diameter", values.diameter || 0);
      // formData.append("number_of_barrels", values.number_of_barrels || 0);
      // formData.append("crown_diameter", values.crown_diameter || 0);
      // formData.append("description", values.description || "");

      // if (values.photo && values.photo.length > 0) {
      //   formData.append("photo", values.photo[0].originFileObj);
      // }

      // if (values.document && values.document.length > 0) {
      //   formData.append("document", values.document[0].originFileObj);
      // }

      await dispatch(createTree(values)).unwrap();
      console.log(values);

      message.success("–î–µ—Ä–µ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
      form.resetFields();
      onClose();
    } catch (error) {
      console.error(error);
      console.log("üî¥ Validation failed:", error);

      message.error(error.response.data.message);
    }
  };

  const steps = [
    {
      title: "–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
      content: (
        <>
          <Form.Item
            name={["type", "name"]}
            label="–¢–∏–ø –¥–µ—Ä–µ–≤–∞"
            rules={[
              { required: true, message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–µ—Ä–µ–≤–∞" },
            ]}
          >
            <Input placeholder="–ö–ª–µ–Ω, –î—É–±, –°–æ—Å–Ω–∞..." />
          </Form.Item>

          <Form.Item
            name="adress"
            label="–ê–¥—Ä–µ—Å"
            rules={[{ required: true, message: "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å" }]}
          >
            <Input
              placeholder="–ê–¥—Ä–µ—Å –ø–æ—Å–∞–¥–∫–∏ –¥–µ—Ä–µ–≤–∞"
              loading={isLoadingAddress}
              disabled={isLoadingAddress}
            />
          </Form.Item>

          <Form.Item name="latitude" label="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —à–∏—Ä–æ—Ç—ã">
            <InputNumber
              style={{ width: "100%" }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É"
            />
          </Form.Item>

          <Form.Item name="longitude" label="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–≥–æ—Ç—ã">
            <InputNumber
              style={{ width: "100%" }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É"
            />
          </Form.Item>
        </>
      ),
    },
    {
      title: "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞",
      content: (
        <>
          <Form.Item name="statusId" label="–°—Ç–∞—Ç—É—Å">
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å">
              {statuses.map((status) => (
                <Select.Option key={status.id} value={status.id}>
                  {status.status_name}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item name="environmentId" label="–°—Ä–µ–¥–∞ –ø—Ä–æ–∏–∑—Ä–∞—Å—Ç–∞–Ω–∏—è">
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—É">
              {environments.map((env) => (
                <Select.Option key={env.id} value={env.id}>
                  {env.name}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>
          <Form.Item name="specialNoteId" label="–û—Å–æ–±—ã–µ –ø–æ–º–µ—Ç–∫–∏">
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–º–µ—Ç–∫—É">
              {specialNotes.map((note) => (
                <Select.Option key={note.id} value={note.id}>
                  {note.note}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item name="conditionId" label="–°–æ—Å—Ç–æ—è–Ω–∏–µ">
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ">
              {conditions.map((cond) => (
                <Select.Option key={cond.id} value={cond.id}>
                  {cond.name}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            name="owner"
            label="–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫"
            rules={[{ required: true, message: "–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞" }]}
          >
            <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞" />
          </Form.Item>

          <Form.Item name="year_of_planting" label="–ì–æ–¥ –ø–æ—Å–∞–¥–∫–∏">
            <DatePicker picker="year" style={{ width: "100%" }} />
          </Form.Item>
        </>
      ),
    },
    {
      title: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
      content: (
        <>
          <Form.Item name="height" label="–í—ã—Å–æ—Ç–∞ (–º)">
            <InputNumber
              min={0}
              step={0.1}
              style={{ width: "100%" }}
              placeholder="–í—ã—Å–æ—Ç–∞"
            />
          </Form.Item>

          <Form.Item name="diameter" label="–î–∏–∞–º–µ—Ç—Ä —Å—Ç–≤–æ–ª–∞ (—Å–º)">
            <InputNumber
              min={0}
              step={1}
              style={{ width: "100%" }}
              placeholder="–î–∏–∞–º–µ—Ç—Ä"
            />
          </Form.Item>

          <Form.Item name="number_of_barrels" label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–≤–æ–ª–æ–≤ (—à—Ç)">
            <InputNumber
              min={0}
              step={1}
              style={{ width: "100%" }}
              placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–≤–æ–ª–æ–≤"
            />
          </Form.Item>

          <Form.Item name="crown_diameter" label="–î–∏–∞–º–µ—Ç—Ä –∫—Ä–æ–Ω—ã (–º)">
            <InputNumber
              min={0}
              step={1}
              style={{ width: "100%" }}
              placeholder="–î–∏–∞–º–µ—Ç—Ä –∫—Ä–æ–Ω—ã"
            />
          </Form.Item>
        </>
      ),
    },
    {
      title: "–§–∞–π–ª—ã",
      content: (
        <>
          <Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
            <TextArea rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" />
          </Form.Item>

          <Form.Item
            name="photo"
            label="–§–æ—Ç–æ –¥–µ—Ä–µ–≤–∞"
            valuePropName="fileList"
            getValueFromEvent={normFile}
            rules={[
              { required: true, message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ä–µ–≤–∞" },
            ]}
          >
            <Upload
              name="photo"
              listType="picture"
              beforeUpload={beforeUpploadPhoto}
            >
              <Button icon={<UploadOutlined />}>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</Button>
            </Upload>
          </Form.Item>

          <Form.Item
            name="document"
            label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"
            valuePropName="fileList"
            getValueFromEvent={normFile}
            rules={[
              { required: true, message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç" },
            ]}
          >
            <Upload
              name="document"
              multiple
              beforeUpload={beforeUpploadDocument}
            >
              <Button icon={<UploadOutlined />}>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã</Button>
            </Upload>
          </Form.Item>
        </>
      ),
    },
  ];

  const stepFields = [
    ["type", "adress", "latitude", "longitude"],
    [
      "statusId",
      "envId",
      "specialNoteId",
      "conditionId",
      "owner",
      "year_of_planting",
    ],
    ["height", "diameter", "crown_diameter", "number_of_barrels"],
    ["photo", "document"],
  ];

  return (
    <Modal
      title="–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ"
      open={isOpen}
      onCancel={onClose}
      footer={null}
      width={800}
      centered
      // destroyOnClose
    >
      <Steps current={currentStep} style={{ marginBottom: "24px" }}>
        {steps.map((item) => (
          <Step key={item.title} title={item.title} />
        ))}
      </Steps>

      <Form
        form={form}
        layout="vertical"
        initialValues={{
          ...initialValues,
          plantingDate: initialValues.plantingDate
            ? dayjs(initialValues.plantingDate)
            : null,
          adress: address,
        }}
        isLoadingAddress={isLoadingAddress}
        onFinish={handleFinish} // <--- –¥–æ–±–∞–≤—å —ç—Ç–æ!
      >
        {steps[currentStep].content}
      </Form>

      <div style={{ marginTop: 24, textAlign: "right" }}>
        {currentStep > 0 && (
          <Button style={{ margin: "0 8px" }} onClick={handlePrev}>
            –ù–∞–∑–∞–¥
          </Button>
        )}
        {currentStep < steps.length - 1 && (
          <Button type="primary" onClick={handleNext}>
            –î–∞–ª–µ–µ
          </Button>
        )}
        {currentStep === steps.length - 1 && (
          <Button
            type="primary"
            onClick={handleFinish}
            htmlType="submit"
            style={{
              backgroundColor: "#2c5c3f",
              borderColor: "#2c5c3f",
              height: "45px",
              fontWeight: "bold",
            }}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        )}
      </div>
    </Modal>
  );
};

export default AddTreeModal;
